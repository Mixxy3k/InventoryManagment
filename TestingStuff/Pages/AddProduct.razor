@page "/addProduct"
@using TestingStuff.Models
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.EntityFrameworkCore
@using TestingStuff.Data
@inject NavigationManager NavigationManager
@inject ApplicationDbContext _dbContext

<h3> Dodawanie produktu spoza zamówień </h3>

<EditForm Model="@product" OnValidSubmit="AddProductToDb">
    <div class="form-group">
        <label for="productName">Nazwa produktu</label>
        <InputText @bind-Value="productName" class="form-control" id="productName" placeholder="Wpisz nazwę produktu" name="productName" />
        <ValidationMessage For="@(() => productName)" />
    </div>
    <div class="form-group">
        <label for="productPrice">Cena produktu</label>
        <InputText @bind-Value="productPrice" class="form-control" id="productPrice" placeholder="Wpisz cenę produktu" name="productPrice" />
        <ValidationMessage For="@(() => productPrice)" />
    </div>
    <div class="form-group">
        <label for="productQuantity">Ilość produktu</label>
        <InputText @bind-Value="productQuantity" class="form-control" id="productQuantity" placeholder="Wpisz ilość produktu" name="productQuantity" />
        <ValidationMessage For="@(() => productQuantity)" />
    </div>
    <div class="form-group">
        <label for="productDescription">Opis produktu</label>
        <InputText @bind-Value="product.Description" class="form-control" id="productDescription" placeholder="Wpisz opis produktu" name="productDescription" />
    </div>
    <div class="form-group">
        <label for="productSupplier">Dostawca produktu</label>
        <select class="form-control" id="productSupplier" name="productSupplier" @bind="product.SupplierId">
            <option value="">Wszyscy dostawcy</option>
            @foreach (var item in suppliers)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="productCategory">Kategoria produktu</label>
        <select class="form-control" id="productCategory" name="productCategory" @bind="product.CategoryId">
            <option value="">Wszystkie kategorie</option>
            @foreach (var item in categories)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="productImage">Zdjęcie produktu</label>
        <InputFile OnChange="@LoadImages" />
    </div>
    <button type="submit" class="btn btn-primary">Dodaj produkt</button>
</EditForm>

@code {
    private bool isUploading;
    private Product product = new Product();
    private IList<Category> categories = new List<Category>();
    private IList<Supplier> suppliers = new List<Supplier>();

    private string productName;
    private string productPrice;
    private string productQuantity;

    protected override async Task OnInitializedAsync()
    {
        categories = await _dbContext.Categories.ToListAsync();
        suppliers = await _dbContext.Suppliers.ToListAsync();
    }

    private async Task LoadImages(InputFileChangeEventArgs e)
    {
        isUploading = true;
        foreach (var file in e.GetMultipleFiles())
        {
            var resizedImageFile = await file.RequestImageFileAsync("image/png", 100, 100);
            using (var ms = new MemoryStream())
            {
                await resizedImageFile.OpenReadStream().CopyToAsync(ms);
                product.Image = ms.ToArray();
            }
        }
        isUploading = false;
    }

    private async Task AddProductToDb()
    {
        // Clear previous validation errors
        ClearValidationErrors();

        // Perform necessary conversions and validate inputs
        if (string.IsNullOrEmpty(productName))
        {
            AddValidationError(nameof(productName), "Nazwa produktu jest wymagana.");
        }
        else
        {
            product.Name = productName;
        }

        if (decimal.TryParse(productPrice, out decimal price))
        {
            product.Price = price;
        }
        else
        {
            AddValidationError(nameof(productPrice), "Nieprawidłowa cena produktu.");
        }

        if (int.TryParse(productQuantity, out int quantity))
        {
            product.Quantity = quantity;
        }
        else
        {
            AddValidationError(nameof(productQuantity), "Nieprawidłowa ilość produktu.");
        }

        // Check if there are any validation errors
        if (HasValidationErrors())
        {
            return;
        }

        // Save the product to the database
        _dbContext.Products.Add(product);
        await _dbContext.SaveChangesAsync();

        // Redirect to the product list page
        NavigationManager.NavigateTo("/productList");
    }

    // Validation error handling

    private Dictionary<string, string> validationErrors = new Dictionary<string, string>();

    private void AddValidationError(string propertyName, string errorMessage)
    {
        validationErrors[propertyName] = errorMessage;
    }

    private bool HasValidationErrors()
    {
        return validationErrors.Count > 0;
    }

    private void ClearValidationErrors()
    {
        validationErrors.Clear();
    }
}
